{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/main/source/font/fontello.eot","path":"font/fontello.eot","modified":1,"renderable":1},{"_id":"themes/main/source/font/fontello.svg","path":"font/fontello.svg","modified":1,"renderable":1},{"_id":"themes/main/source/font/fontello.ttf","path":"font/fontello.ttf","modified":1,"renderable":1},{"_id":"themes/main/source/font/fontello.woff","path":"font/fontello.woff","modified":1,"renderable":1},{"_id":"themes/main/source/font/fontello.woff2","path":"font/fontello.woff2","modified":1,"renderable":1},{"_id":"themes/main/source/images/android-icon-144x144.png","path":"images/android-icon-144x144.png","modified":1,"renderable":1},{"_id":"themes/main/source/images/android-icon-36x36.png","path":"images/android-icon-36x36.png","modified":1,"renderable":1},{"_id":"themes/main/source/images/android-icon-72x72.png","path":"images/android-icon-72x72.png","modified":1,"renderable":1},{"_id":"themes/main/source/images/android-icon-48x48.png","path":"images/android-icon-48x48.png","modified":1,"renderable":1},{"_id":"themes/main/source/images/android-icon-96x96.png","path":"images/android-icon-96x96.png","modified":1,"renderable":1},{"_id":"themes/main/source/images/apple-icon-114x114.png","path":"images/apple-icon-114x114.png","modified":1,"renderable":1},{"_id":"themes/main/source/images/apple-icon-120x120.png","path":"images/apple-icon-120x120.png","modified":1,"renderable":1},{"_id":"themes/main/source/images/apple-icon-144x144.png","path":"images/apple-icon-144x144.png","modified":1,"renderable":1},{"_id":"themes/main/source/images/apple-icon-152x152.png","path":"images/apple-icon-152x152.png","modified":1,"renderable":1},{"_id":"themes/main/source/images/apple-icon-57x57.png","path":"images/apple-icon-57x57.png","modified":1,"renderable":1},{"_id":"themes/main/source/images/apple-icon-180x180.png","path":"images/apple-icon-180x180.png","modified":1,"renderable":1},{"_id":"themes/main/source/images/apple-icon-60x60.png","path":"images/apple-icon-60x60.png","modified":1,"renderable":1},{"_id":"themes/main/source/images/apple-icon-72x72.png","path":"images/apple-icon-72x72.png","modified":1,"renderable":1},{"_id":"themes/main/source/images/apple-icon-76x76.png","path":"images/apple-icon-76x76.png","modified":1,"renderable":1},{"_id":"themes/main/source/images/favicon-16x16.png","path":"images/favicon-16x16.png","modified":1,"renderable":1},{"_id":"themes/main/source/images/browserconfig.xml","path":"images/browserconfig.xml","modified":1,"renderable":1},{"_id":"themes/main/source/images/favicon-32x32.png","path":"images/favicon-32x32.png","modified":1,"renderable":1},{"_id":"themes/main/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/main/source/images/favicon-96x96.png","path":"images/favicon-96x96.png","modified":1,"renderable":1},{"_id":"themes/main/source/images/manifest.json","path":"images/manifest.json","modified":1,"renderable":1},{"_id":"themes/main/source/images/ms-icon-144x144.png","path":"images/ms-icon-144x144.png","modified":1,"renderable":1},{"_id":"themes/main/source/images/ms-icon-150x150.png","path":"images/ms-icon-150x150.png","modified":1,"renderable":1},{"_id":"themes/main/source/images/ms-icon-70x70.png","path":"images/ms-icon-70x70.png","modified":1,"renderable":1},{"_id":"themes/main/source/images/portrait-rounded.png","path":"images/portrait-rounded.png","modified":1,"renderable":1},{"_id":"themes/main/source/scripts/highlight.pack.js","path":"scripts/highlight.pack.js","modified":1,"renderable":1},{"_id":"themes/main/source/styles/index.styl","path":"styles/index.styl","modified":1,"renderable":1},{"_id":"themes/main/source/styles/mixins.styl","path":"styles/mixins.styl","modified":1,"renderable":1},{"_id":"themes/main/source/styles/post.styl","path":"styles/post.styl","modified":1,"renderable":1},{"_id":"themes/main/source/styles/page.styl","path":"styles/page.styl","modified":1,"renderable":1},{"_id":"themes/main/source/styles/style.styl","path":"styles/style.styl","modified":1,"renderable":1},{"_id":"themes/main/source/images/android-icon-192x192.png","path":"images/android-icon-192x192.png","modified":1,"renderable":1},{"_id":"themes/main/source/images/apple-icon-precomposed.png","path":"images/apple-icon-precomposed.png","modified":1,"renderable":1},{"_id":"themes/main/source/images/apple-icon.png","path":"images/apple-icon.png","modified":1,"renderable":1},{"_id":"themes/main/source/images/portrait.jpg","path":"images/portrait.jpg","modified":1,"renderable":1},{"_id":"themes/main/source/images/ms-icon-310x310.png","path":"images/ms-icon-310x310.png","modified":1,"renderable":1},{"_id":"themes/main/source/images/background-small.jpg","path":"images/background-small.jpg","modified":1,"renderable":1},{"_id":"themes/main/source/images/background-medium.jpg","path":"images/background-medium.jpg","modified":1,"renderable":1},{"_id":"themes/main/source/images/background.jpg","path":"images/background.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1471030166000},{"_id":"source/404/index.md","hash":"e6eb87075cae0f356466cb355c43d0ea2a9da43e","modified":1471293473000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1471030176000},{"_id":"source/_posts/data-models-for-modern-frontend-applications.md","hash":"d733dc1c1ff0d8a3f1eae7dc6bef4ac953c0d116","modified":1471296781000},{"_id":"themes/main/layout/base.pug","hash":"dbe127d0ea60c2b2104098f5f2f5d7162ce2a4eb","modified":1471350274000},{"_id":"themes/main/layout/index.pug","hash":"474c6c5e6e54eef5fafbf9d0c51013fe8c868650","modified":1471015413000},{"_id":"themes/main/layout/page.pug","hash":"32097ce9c54f5591fac6c6a5869c9bfb191da57a","modified":1471350376000},{"_id":"themes/main/layout/post.pug","hash":"ab31863fee5d6c6c755cc0b03146ce2513b2b126","modified":1471350367000},{"_id":"themes/main/source/.DS_Store","hash":"52d022effdcae599f1ae6fd885d6b19c8415a1dc","modified":1471251012000},{"_id":"themes/main/layout/elements/articles.pug","hash":"34ec2c3ff0881d591e50ec25efde9a69c058cbff","modified":1471109143000},{"_id":"themes/main/layout/elements/contacts.pug","hash":"8be0cff98669bda2fd28d8de61b5fb1bd4a19831","modified":1471014015000},{"_id":"themes/main/layout/elements/education.pug","hash":"f12720cf0f8a27cbedbd3f2b9d2bacf9fe82e9ba","modified":1471212627000},{"_id":"themes/main/layout/elements/more.pug","hash":"4ba5b861c2f083fa273a6a8141a9d9f91c843e4a","modified":1471012202000},{"_id":"themes/main/layout/mixins/element.pug","hash":"f361fdec7ba2b47fdc4ff966920260dc036ef51d","modified":1471010971000},{"_id":"themes/main/layout/elements/work-history.pug","hash":"ca2cc8f709fd05b09ad84a4397aa13b77b5f47cd","modified":1471014069000},{"_id":"themes/main/layout/elements/skills.pug","hash":"cc28131d7eb6d92389fc195c23e0ad4c7ec83870","modified":1471011797000},{"_id":"themes/main/layout/elements/summary.pug","hash":"96d3f08557dcc95dcbf528872e566208f511bd18","modified":1471212549000},{"_id":"themes/main/layout/mixins/info-block.pug","hash":"ec8dbaf66444c04bb5c78b35a1eb5ae084a1b9f5","modified":1471011227000},{"_id":"themes/main/layout/mixins/link.pug","hash":"fde730cb7649afd206d3e7a475c6b6642eb5488a","modified":1471014510000},{"_id":"themes/main/layout/mixins/mail-link.pug","hash":"0c662e32487e8a1f539adc8be51701445b678b30","modified":1471011342000},{"_id":"themes/main/source/font/fontello.eot","hash":"29e608c9c6d3a05e88c6c2453117754c0960908c","modified":1471036094000},{"_id":"themes/main/source/font/fontello.svg","hash":"996bfe9ed03b60e9e8de893f92d5b459bb005a04","modified":1471036094000},{"_id":"themes/main/source/font/fontello.ttf","hash":"c7f226dbb63c672dc8cebe729d7afb9225469ade","modified":1471036094000},{"_id":"themes/main/source/font/fontello.woff","hash":"358ecc56e0f74c18264b1e093c4f64a75f57ddc1","modified":1471036094000},{"_id":"themes/main/source/font/fontello.woff2","hash":"47c3bc3f6ff716facab75e7ceaff61e0a07e38d6","modified":1471036094000},{"_id":"themes/main/source/images/android-icon-144x144.png","hash":"ad338e024c5a85e9797b805ddb66d635224f6162","modified":1471007234000},{"_id":"themes/main/source/images/android-icon-36x36.png","hash":"eb2a24a38f00e1addc6f23ba2c850e13bc6e6b35","modified":1471007234000},{"_id":"themes/main/source/images/android-icon-72x72.png","hash":"392ca593bb6f5bf86d373e025be3295672b4e86b","modified":1471007234000},{"_id":"themes/main/source/images/android-icon-48x48.png","hash":"93c5b63945b2e55d0397ff09a00eaa63a9a7f298","modified":1471007234000},{"_id":"themes/main/source/images/android-icon-96x96.png","hash":"ecddf0df1d18f8d1bdbadaad804b336f709c0590","modified":1471007234000},{"_id":"themes/main/source/images/apple-icon-114x114.png","hash":"15f2f1c40b730ecc2efeba16102f3e54d88a3901","modified":1471007234000},{"_id":"themes/main/source/images/.DS_Store","hash":"5bba1e4345a2ac0da91a0d4040bb97f9f8c99b72","modified":1471244335000},{"_id":"themes/main/source/images/apple-icon-120x120.png","hash":"1c5f9326e729c54e006bd2209ce40e569e15cc47","modified":1471007234000},{"_id":"themes/main/source/images/apple-icon-144x144.png","hash":"ad338e024c5a85e9797b805ddb66d635224f6162","modified":1471007234000},{"_id":"themes/main/source/images/apple-icon-152x152.png","hash":"882f9423630abea0a87b036225ae0f78e321763f","modified":1471007234000},{"_id":"themes/main/source/images/apple-icon-57x57.png","hash":"5d0cc1aa9092ca8b1e73eae32c4228cc5b3b475f","modified":1471007234000},{"_id":"themes/main/source/images/apple-icon-180x180.png","hash":"1e44aac97ccd48ff669754a0123b910fc6a3fdfe","modified":1471007234000},{"_id":"themes/main/source/images/apple-icon-60x60.png","hash":"b92abb5d3550c9831e175f08f4d08169d86d532c","modified":1471007234000},{"_id":"themes/main/source/images/apple-icon-72x72.png","hash":"392ca593bb6f5bf86d373e025be3295672b4e86b","modified":1471007234000},{"_id":"themes/main/source/images/apple-icon-76x76.png","hash":"df2c4510352f4921ac3f8042e2634e012e5bcffa","modified":1471007234000},{"_id":"themes/main/source/images/favicon-16x16.png","hash":"f8818c41517ce2aca694d30cf75cb11e3a6d3cad","modified":1471007235000},{"_id":"themes/main/source/images/browserconfig.xml","hash":"e0a0c4648947711befd5d7a6130a4d9c84a80f75","modified":1471007235000},{"_id":"themes/main/source/images/favicon-32x32.png","hash":"e40a495c1bffed8e71c43683190975ab9b280d51","modified":1471007235000},{"_id":"themes/main/source/images/favicon.ico","hash":"e5ba007e073ac0fdc73b0549913ae418950e4659","modified":1471007235000},{"_id":"themes/main/source/images/favicon-96x96.png","hash":"ecddf0df1d18f8d1bdbadaad804b336f709c0590","modified":1471007235000},{"_id":"themes/main/source/images/manifest.json","hash":"8a59280c2fc6f41c228b7c759b753d01f6e51c35","modified":1471007235000},{"_id":"themes/main/source/images/ms-icon-144x144.png","hash":"ad338e024c5a85e9797b805ddb66d635224f6162","modified":1471007235000},{"_id":"themes/main/source/images/ms-icon-150x150.png","hash":"529fea995c44a309e01ddda59a93d0f36194b124","modified":1471007235000},{"_id":"themes/main/source/images/ms-icon-70x70.png","hash":"7208a76709cc82f65f97987c7237ef30b1fdaaae","modified":1471007235000},{"_id":"themes/main/source/images/portrait-rounded.png","hash":"d4c75e3751ae61d3e9a27febfff637282bcfc5ed","modified":1471007235000},{"_id":"themes/main/source/scripts/highlight.pack.js","hash":"86d1fbf1512edc2bae5a69ecd9a637fff058f6c5","modified":1470981102000},{"_id":"themes/main/source/styles/index.styl","hash":"ebe86bf5a37404b02e831414933ce52f4e99d3bb","modified":1471109790000},{"_id":"themes/main/source/styles/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1471012453000},{"_id":"themes/main/source/styles/mixins.styl","hash":"adc13590df93780e0862d0c066d53a735679c8f0","modified":1471110059000},{"_id":"themes/main/source/styles/post.styl","hash":"914e31e1a56ac428c2f39c418c20961a1bb94b80","modified":1471270129000},{"_id":"themes/main/source/styles/page.styl","hash":"1214c3b913ded4fd42491b43adf0897c2cb799f5","modified":1471293673000},{"_id":"themes/main/source/styles/style.styl","hash":"0e4c7c1368e6700d018466322cc018bf5bbc0bce","modified":1471109937000},{"_id":"themes/main/source/images/android-icon-192x192.png","hash":"5036b1bb5e8c078b367730914bad20b0074393a7","modified":1471007234000},{"_id":"themes/main/source/images/apple-icon-precomposed.png","hash":"3ee4168774c2ea3fecc0fedd0be9241645e990ba","modified":1471007234000},{"_id":"themes/main/source/images/apple-icon.png","hash":"3ee4168774c2ea3fecc0fedd0be9241645e990ba","modified":1471007234000},{"_id":"themes/main/source/images/portrait.jpg","hash":"3c27ed68a297e668749dad6ef7cb675249b666f9","modified":1471210488000},{"_id":"themes/main/source/images/ms-icon-310x310.png","hash":"817e38ccffe05325de7b47cf6105fe60261a5f66","modified":1471007235000},{"_id":"themes/main/source/images/background-small.jpg","hash":"efe646c4792ccc97628a51b8c7e7dc3eb127f914","modified":1471007234000},{"_id":"themes/main/source/images/background-medium.jpg","hash":"193b275227716635c82b44f35bf41d01fce1838d","modified":1471007234000},{"_id":"themes/main/source/images/background.jpg","hash":"763376db3fcb0873fa6cd2651c8bcaedf4904233","modified":1471007235000}],"Category":[{"name":"Development","_id":"cirxg186600032721wggmks3b"}],"Data":[],"Page":[{"title":"404","date":"2016-08-15T14:26:56.000Z","_content":"\n<style>\n    .body {\n        box-shadow: none;\n    }\n</style>\n<div class=\"b404\">\n    404\n</div>  ","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2016-08-15 17:26:56\npermalink: /404\n---\n\n<style>\n    .body {\n        box-shadow: none;\n    }\n</style>\n<div class=\"b404\">\n    404\n</div>  ","updated":"2016-08-15T20:37:53.000Z","path":"/404.html","comments":1,"layout":"page","_id":"cirxg185v00002721b4joawx5","content":"<style>\n    .body {\n        box-shadow: none;\n    }\n</style>\n<div class=\"b404\">\n    404\n</div>  ","excerpt":"","more":"<style>\n    .body {\n        box-shadow: none;\n    }\n</style>\n<div class=\"b404\">\n    404\n</div>  "}],"Post":[{"title":"Data models for modern frontend applications","date":"2016-08-15T14:11:51.000Z","_content":"\nThere is a bunch of popular frameworks, which gives you a way to create and manipulate data model. \nFor example, Backbone, Ember, and some others.\nBut modern JavaScript gives you the opportunity to create simple yet powerful models in minutes.\n\nIn first part of this article we will see how to do it. While the second part will show us the power \nof TypeScript in the same task. You will also learn how to create property decorators.\n\nLet's start!  \n\n## Part 1. JavaScript Way\n\nSo, let's create a model class named `Person`, which has 2 public properties: `name` and `surname`.\n\n{% codeblock Person.js lang:javascript %}\nvar Person = function(name, surname) {\n    this.name = name;\n    this.surname = surname;\n};\n{% endcodeblock %}\n\nPretty simple, yeah? \n\nLet's add a computed property `fullname`. We will use [Object.defineProperty()](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty). \nThis is a cool cross-browser feature, which has been implemented even in IE 9. \nIt gives you the opportunity to set accessors without creating `.get()` and `.set()` methods.\n\n{% codeblock Person.js continuation lang:javascript %}\nObject.defineProperty(Person.prototype, 'fullname', {\n    get: function() { \n        return this.name + ' ' + this.surname; \n    },\n    enumerable: true,\n    configurable: false\n});\n\nvar john = new Person('John', 'Snow');\n\nconsole.log(john.fullname); // => 'John Snow'\n{% endcodeblock %}\n\nPay your attention to a fact that you should create property in Person.prototype instead of \ninstance, because this property is actually a getter, so it is a function.\n\nLook how this getter works. It calculates `fullname` every time you try to get it. Let's create some caching to avoid redundant computations. \nThis feature requires dependencies (`name` and `surname`) to change cached value.\nI suggest to create special `property()` and `computed()` functions to bind computeds and dependencies together.\n\n{% codeblock property.js lang:javascript %}\nfunction property(target, propName) {\n    target.prototype._depsMap = target.prototype._depsMap || {};\n    target.prototype._getters = target.prototype._getters || {};\n\n    Object.defineProperty(target.prototype, propName, {\n        set: function(value) { \n            this._cached = this._cached || {};\n\n            if (value !== this._cached[propName]) {\n                this._cached[propName] = value;\n\n                var deps = this._depsMap[propName];\n                \n                for (var i = 0; i < deps.length; i++) {\n                    this._cached[deps[i]] = this._getters[deps[i]].call(this);\n                }      \n            }\n        },\n        get: function() {\n            this._cached = this._cached || {};\n\n            return this._cached[propName]; \n        },\n        enumerable: true,\n        configurable: true\n    });\n}\n{% endcodeblock %}\n\n{% codeblock computed.js lang:javascript %}\nfunction computed(target, propName, depsArr, getter) {\n    target.prototype._depsMap = target.prototype._depsMap || {};\n    target.prototype._getters = target.prototype._getters || {};\n\n    target.prototype._getters[propName] = getter;\n\n    for (var i = 0; i < depsArr.length; i++) {\n        var dep = depsArr[i];\n\n        target.prototype._depsMap[dep] = target.prototype._depsMap[dep] || [];\n\n        if (target.prototype._depsMap[dep].indexOf(propName) === -1) {\n            target.prototype._depsMap[dep].push(propName);\n        }\n    } \n\n    Object.defineProperty(target.prototype, propName, {\n        get: function() { \n            this._cached = this._cached || {};\n\n            return this._cached[propName];\n        },\n        enumerable: true,\n        configurable: true\n    });\n}\n{% endcodeblock %}\n\nIn these functions we created service prototype properties: \n- `_depsMap` to store information about relations between computeds and dependencies,\n- `_getters` to store original getters of computeds.\n\nOne should mention that both of `property()` and `computed()` are actually property decorators. \n\nNow `Person` model should be described like this: \n\n{% codeblock Person.js lang:javascript %}\nvar Person = function(name, surname) {\n    this.name = name;\n    this.surname = surname;\n};\n\nproperty(Person, 'name');\nproperty(Person, 'surname');\ncomputed(Person, 'fullname', ['name', 'surname'], function () {\n    return this.name + ' ' + this.surname;\n});\n{% endcodeblock %}\n\nHooray! Now we have simple but awesome model without any frameworks and libraries.\n\n## Part 2. TypeScript Way\n\nOK. Now Let's do the same thing using cool TypeScript features.\n\nSimple `Person` class will look like this:\n\n{% codeblock Person.ts lang:typescript %}\nclass Person {\n    public name: string;\n    public surname: string;\n    public get fullname():string {\n        return `${this.name} ${this.surname}`; \n    }\n\n    constructor(name: string, surname: string) {\n        this.name = name;\n        this.surname = surname;\n    }\n}\n{% endcodeblock %}\n\nI have mentioned that `property()` and `computed()` from part 1 are decorators. \nTypescript has very convenient style of creating and using decorators. \nYou can get more info in [this article](http://blog.wolksoftware.com/decorators-reflection-javascript-typescript).\n\nI should say that decorators are still an experimental TS feature. \nThe compiler must be run with `--experimentalDecorators` flag.\n\nSo these are new functions:\n\n{% codeblock property.ts lang:typescript %}\nfunction property(target: any, propName: string) {\n    target._depsMap = target._depsMap || {};\n    target._getters = target._getters || {};\n    \n    Object.defineProperty(target, propName, {\n        set: function(value) { \n            this._cached = this._cached || {};\n            \n            if (value !== this._cached[propName]) {\n                this._cached[propName] = value;\n\n                let deps = this._depsMap[propName];\n                \n                for (let dep of deps) {\n                    this._cached[dep] = this._getters[dep].call(this);\n                }\n            }\n        },\n        get: function() {\n            this._cached = this._cached || {};\n            \n            return this._cached[propName]; \n        },\n        enumerable: true,\n        configurable: true\n    });\n}\n{% endcodeblock %}\n\n{% codeblock computed.ts lang:typescript %}\nfunction computed(...deps: Array<string>) {\n    return function (target, propName, descriptor: TypedPropertyDescriptor<any>) {\n        target._depsMap = target._depsMap || {};\n        target._getters = target._getters || {};\n        \n        target._getters[propName] = descriptor.get;\n        \n        for (let dep of deps) {\n            target._depsMap[dep] = target._depsMap[dep] || [];\n\n            if (target._depsMap[dep].indexOf(propName) === -1) {    \n                target._depsMap[dep].push(propName);\n            }\n        }\n        \n        descriptor.get = function() {\n            this._cached = this._cached || {};\n            \n            return this._cached[propName];\n        }\n        \n        return descriptor;\n    }\n}\n{% endcodeblock %}\n\nActually, these decorators are the same stuff as in JavaScript part.\n\nAnd here is an updated `Person` class. Look at a very convenient '@-blabla' notation. \nThis is how decorators are applied in TypeScript.\n\n{% codeblock Person.ts lang:typescript %}\nclass Person { \n    @property\n    public name: string;\n    \n    @property\n    public surname: string;\n    \n    @computed('name', 'surname')\n    public get fullname(): string {\n        return `${this.name} ${this.surname}`; \n    }\n\n    constructor(name: string, surname: string) {\n        this.name = name;\n        this.surname = surname;\n    }\n}\n{% endcodeblock %} \n\n## Conclusion\n\nIn this post I've described a method to design data models without any frameworks. \n\nYou can add lots of other features to your models using these approach. \nFor example, you can add `observable()` decorator paired with `.onchange()` and `.off()` methods \nto implement event emitter pattern.   ","source":"_posts/data-models-for-modern-frontend-applications.md","raw":"---\ntitle: Data models for modern frontend applications\ndate: 2016-08-15 17:11:51\ntags: \n- JavaScript\n- TypeScript\ncategories:\n- Development\n---\n\nThere is a bunch of popular frameworks, which gives you a way to create and manipulate data model. \nFor example, Backbone, Ember, and some others.\nBut modern JavaScript gives you the opportunity to create simple yet powerful models in minutes.\n\nIn first part of this article we will see how to do it. While the second part will show us the power \nof TypeScript in the same task. You will also learn how to create property decorators.\n\nLet's start!  \n\n## Part 1. JavaScript Way\n\nSo, let's create a model class named `Person`, which has 2 public properties: `name` and `surname`.\n\n{% codeblock Person.js lang:javascript %}\nvar Person = function(name, surname) {\n    this.name = name;\n    this.surname = surname;\n};\n{% endcodeblock %}\n\nPretty simple, yeah? \n\nLet's add a computed property `fullname`. We will use [Object.defineProperty()](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty). \nThis is a cool cross-browser feature, which has been implemented even in IE 9. \nIt gives you the opportunity to set accessors without creating `.get()` and `.set()` methods.\n\n{% codeblock Person.js continuation lang:javascript %}\nObject.defineProperty(Person.prototype, 'fullname', {\n    get: function() { \n        return this.name + ' ' + this.surname; \n    },\n    enumerable: true,\n    configurable: false\n});\n\nvar john = new Person('John', 'Snow');\n\nconsole.log(john.fullname); // => 'John Snow'\n{% endcodeblock %}\n\nPay your attention to a fact that you should create property in Person.prototype instead of \ninstance, because this property is actually a getter, so it is a function.\n\nLook how this getter works. It calculates `fullname` every time you try to get it. Let's create some caching to avoid redundant computations. \nThis feature requires dependencies (`name` and `surname`) to change cached value.\nI suggest to create special `property()` and `computed()` functions to bind computeds and dependencies together.\n\n{% codeblock property.js lang:javascript %}\nfunction property(target, propName) {\n    target.prototype._depsMap = target.prototype._depsMap || {};\n    target.prototype._getters = target.prototype._getters || {};\n\n    Object.defineProperty(target.prototype, propName, {\n        set: function(value) { \n            this._cached = this._cached || {};\n\n            if (value !== this._cached[propName]) {\n                this._cached[propName] = value;\n\n                var deps = this._depsMap[propName];\n                \n                for (var i = 0; i < deps.length; i++) {\n                    this._cached[deps[i]] = this._getters[deps[i]].call(this);\n                }      \n            }\n        },\n        get: function() {\n            this._cached = this._cached || {};\n\n            return this._cached[propName]; \n        },\n        enumerable: true,\n        configurable: true\n    });\n}\n{% endcodeblock %}\n\n{% codeblock computed.js lang:javascript %}\nfunction computed(target, propName, depsArr, getter) {\n    target.prototype._depsMap = target.prototype._depsMap || {};\n    target.prototype._getters = target.prototype._getters || {};\n\n    target.prototype._getters[propName] = getter;\n\n    for (var i = 0; i < depsArr.length; i++) {\n        var dep = depsArr[i];\n\n        target.prototype._depsMap[dep] = target.prototype._depsMap[dep] || [];\n\n        if (target.prototype._depsMap[dep].indexOf(propName) === -1) {\n            target.prototype._depsMap[dep].push(propName);\n        }\n    } \n\n    Object.defineProperty(target.prototype, propName, {\n        get: function() { \n            this._cached = this._cached || {};\n\n            return this._cached[propName];\n        },\n        enumerable: true,\n        configurable: true\n    });\n}\n{% endcodeblock %}\n\nIn these functions we created service prototype properties: \n- `_depsMap` to store information about relations between computeds and dependencies,\n- `_getters` to store original getters of computeds.\n\nOne should mention that both of `property()` and `computed()` are actually property decorators. \n\nNow `Person` model should be described like this: \n\n{% codeblock Person.js lang:javascript %}\nvar Person = function(name, surname) {\n    this.name = name;\n    this.surname = surname;\n};\n\nproperty(Person, 'name');\nproperty(Person, 'surname');\ncomputed(Person, 'fullname', ['name', 'surname'], function () {\n    return this.name + ' ' + this.surname;\n});\n{% endcodeblock %}\n\nHooray! Now we have simple but awesome model without any frameworks and libraries.\n\n## Part 2. TypeScript Way\n\nOK. Now Let's do the same thing using cool TypeScript features.\n\nSimple `Person` class will look like this:\n\n{% codeblock Person.ts lang:typescript %}\nclass Person {\n    public name: string;\n    public surname: string;\n    public get fullname():string {\n        return `${this.name} ${this.surname}`; \n    }\n\n    constructor(name: string, surname: string) {\n        this.name = name;\n        this.surname = surname;\n    }\n}\n{% endcodeblock %}\n\nI have mentioned that `property()` and `computed()` from part 1 are decorators. \nTypescript has very convenient style of creating and using decorators. \nYou can get more info in [this article](http://blog.wolksoftware.com/decorators-reflection-javascript-typescript).\n\nI should say that decorators are still an experimental TS feature. \nThe compiler must be run with `--experimentalDecorators` flag.\n\nSo these are new functions:\n\n{% codeblock property.ts lang:typescript %}\nfunction property(target: any, propName: string) {\n    target._depsMap = target._depsMap || {};\n    target._getters = target._getters || {};\n    \n    Object.defineProperty(target, propName, {\n        set: function(value) { \n            this._cached = this._cached || {};\n            \n            if (value !== this._cached[propName]) {\n                this._cached[propName] = value;\n\n                let deps = this._depsMap[propName];\n                \n                for (let dep of deps) {\n                    this._cached[dep] = this._getters[dep].call(this);\n                }\n            }\n        },\n        get: function() {\n            this._cached = this._cached || {};\n            \n            return this._cached[propName]; \n        },\n        enumerable: true,\n        configurable: true\n    });\n}\n{% endcodeblock %}\n\n{% codeblock computed.ts lang:typescript %}\nfunction computed(...deps: Array<string>) {\n    return function (target, propName, descriptor: TypedPropertyDescriptor<any>) {\n        target._depsMap = target._depsMap || {};\n        target._getters = target._getters || {};\n        \n        target._getters[propName] = descriptor.get;\n        \n        for (let dep of deps) {\n            target._depsMap[dep] = target._depsMap[dep] || [];\n\n            if (target._depsMap[dep].indexOf(propName) === -1) {    \n                target._depsMap[dep].push(propName);\n            }\n        }\n        \n        descriptor.get = function() {\n            this._cached = this._cached || {};\n            \n            return this._cached[propName];\n        }\n        \n        return descriptor;\n    }\n}\n{% endcodeblock %}\n\nActually, these decorators are the same stuff as in JavaScript part.\n\nAnd here is an updated `Person` class. Look at a very convenient '@-blabla' notation. \nThis is how decorators are applied in TypeScript.\n\n{% codeblock Person.ts lang:typescript %}\nclass Person { \n    @property\n    public name: string;\n    \n    @property\n    public surname: string;\n    \n    @computed('name', 'surname')\n    public get fullname(): string {\n        return `${this.name} ${this.surname}`; \n    }\n\n    constructor(name: string, surname: string) {\n        this.name = name;\n        this.surname = surname;\n    }\n}\n{% endcodeblock %} \n\n## Conclusion\n\nIn this post I've described a method to design data models without any frameworks. \n\nYou can add lots of other features to your models using these approach. \nFor example, you can add `observable()` decorator paired with `.onchange()` and `.off()` methods \nto implement event emitter pattern.   ","slug":"data-models-for-modern-frontend-applications","published":1,"updated":"2016-08-15T21:33:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirxg185y00012721d3z501dz","content":"<p>There is a bunch of popular frameworks, which gives you a way to create and manipulate data model.\nFor example, Backbone, Ember, and some others.\nBut modern JavaScript gives you the opportunity to create simple yet powerful models in minutes.</p>\n<p>In first part of this article we will see how to do it. While the second part will show us the power\nof TypeScript in the same task. You will also learn how to create property decorators.</p>\n<p>Let’s start!</p>\n<h2 id=\"part-1-javascript-way\">Part 1. JavaScript Way</h2>\n<p>So, let’s create a model class named <code>Person</code>, which has 2 public properties: <code>name</code> and <code>surname</code>.</p>\n<figure class=\"highlight javascript\"><figcaption><span>Person.js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Person = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, surname</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.surname = surname;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Pretty simple, yeah?</p>\n<p>Let’s add a computed property <code>fullname</code>. We will use <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"external\">Object.defineProperty()</a>.\nThis is a cool cross-browser feature, which has been implemented even in IE 9.\nIt gives you the opportunity to set accessors without creating <code>.get()</code> and <code>.set()</code> methods.</p>\n<figure class=\"highlight javascript\"><figcaption><span>Person.js continuation</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(Person.prototype, <span class=\"string\">'fullname'</span>, &#123;</div><div class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.surname; </div><div class=\"line\">    &#125;,</div><div class=\"line\">    enumerable: <span class=\"literal\">true</span>,</div><div class=\"line\">    configurable: <span class=\"literal\">false</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> john = <span class=\"keyword\">new</span> Person(<span class=\"string\">'John'</span>, <span class=\"string\">'Snow'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(john.fullname); <span class=\"comment\">// =&gt; 'John Snow'</span></div></pre></td></tr></table></figure>\n<p>Pay your attention to a fact that you should create property in Person.prototype instead of\ninstance, because this property is actually a getter, so it is a function.</p>\n<p>Look how this getter works. It calculates <code>fullname</code> every time you try to get it. Let’s create some caching to avoid redundant computations.\nThis feature requires dependencies (<code>name</code> and <code>surname</code>) to change cached value.\nI suggest to create special <code>property()</code> and <code>computed()</code> functions to bind computeds and dependencies together.</p>\n<figure class=\"highlight javascript\"><figcaption><span>property.js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">property</span>(<span class=\"params\">target, propName</span>) </span>&#123;</div><div class=\"line\">    target.prototype._depsMap = target.prototype._depsMap || &#123;&#125;;</div><div class=\"line\">    target.prototype._getters = target.prototype._getters || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(target.prototype, propName, &#123;</div><div class=\"line\">        set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123; </div><div class=\"line\">            <span class=\"keyword\">this</span>._cached = <span class=\"keyword\">this</span>._cached || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (value !== <span class=\"keyword\">this</span>._cached[propName]) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>._cached[propName] = value;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">var</span> deps = <span class=\"keyword\">this</span>._depsMap[propName];</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; deps.length; i++) &#123;</div><div class=\"line\">                    <span class=\"keyword\">this</span>._cached[deps[i]] = <span class=\"keyword\">this</span>._getters[deps[i]].call(<span class=\"keyword\">this</span>);</div><div class=\"line\">                &#125;      </div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>._cached = <span class=\"keyword\">this</span>._cached || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._cached[propName]; </div><div class=\"line\">        &#125;,</div><div class=\"line\">        enumerable: <span class=\"literal\">true</span>,</div><div class=\"line\">        configurable: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><figcaption><span>computed.js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">computed</span>(<span class=\"params\">target, propName, depsArr, getter</span>) </span>&#123;</div><div class=\"line\">    target.prototype._depsMap = target.prototype._depsMap || &#123;&#125;;</div><div class=\"line\">    target.prototype._getters = target.prototype._getters || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    target.prototype._getters[propName] = getter;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; depsArr.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> dep = depsArr[i];</div><div class=\"line\"></div><div class=\"line\">        target.prototype._depsMap[dep] = target.prototype._depsMap[dep] || [];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (target.prototype._depsMap[dep].indexOf(propName) === <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">            target.prototype._depsMap[dep].push(propName);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; </div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(target.prototype, propName, &#123;</div><div class=\"line\">        get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">            <span class=\"keyword\">this</span>._cached = <span class=\"keyword\">this</span>._cached || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._cached[propName];</div><div class=\"line\">        &#125;,</div><div class=\"line\">        enumerable: <span class=\"literal\">true</span>,</div><div class=\"line\">        configurable: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>In these functions we created service prototype properties:</p>\n<ul>\n<li><code>_depsMap</code> to store information about relations between computeds and dependencies,</li>\n<li><code>_getters</code> to store original getters of computeds.</li>\n</ul>\n<p>One should mention that both of <code>property()</code> and <code>computed()</code> are actually property decorators.</p>\n<p>Now <code>Person</code> model should be described like this:</p>\n<figure class=\"highlight javascript\"><figcaption><span>Person.js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Person = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, surname</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.surname = surname;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">property(Person, <span class=\"string\">'name'</span>);</div><div class=\"line\">property(Person, <span class=\"string\">'surname'</span>);</div><div class=\"line\">computed(Person, <span class=\"string\">'fullname'</span>, [<span class=\"string\">'name'</span>, <span class=\"string\">'surname'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.surname;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Hooray! Now we have simple but awesome model without any frameworks and libraries.</p>\n<h2 id=\"part-2-typescript-way\">Part 2. TypeScript Way</h2>\n<p>OK. Now Let’s do the same thing using cool TypeScript features.</p>\n<p>Simple <code>Person</code> class will look like this:</p>\n<figure class=\"highlight typescript\"><figcaption><span>Person.ts</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Person &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> name: <span class=\"built_in\">string</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> surname: <span class=\"built_in\">string</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">get</span> fullname():<span class=\"built_in\">string</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;this.name&#125;</span> <span class=\"subst\">$&#123;this.surname&#125;</span>`</span>; </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name: string, surname: string) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.surname = surname;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>I have mentioned that <code>property()</code> and <code>computed()</code> from part 1 are decorators.\nTypescript has very convenient style of creating and using decorators.\nYou can get more info in <a href=\"http://blog.wolksoftware.com/decorators-reflection-javascript-typescript\" target=\"_blank\" rel=\"external\">this article</a>.</p>\n<p>I should say that decorators are still an experimental TS feature.\nThe compiler must be run with <code>--experimentalDecorators</code> flag.</p>\n<p>So these are new functions:</p>\n<figure class=\"highlight typescript\"><figcaption><span>property.ts</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">property</span>(<span class=\"params\">target: <span class=\"built_in\">any</span>, propName: <span class=\"built_in\">string</span></span>) </span>&#123;</div><div class=\"line\">    target._depsMap = target._depsMap || &#123;&#125;;</div><div class=\"line\">    target._getters = target._getters || &#123;&#125;;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(target, propName, &#123;</div><div class=\"line\">        <span class=\"keyword\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123; </div><div class=\"line\">            <span class=\"keyword\">this</span>._cached = <span class=\"keyword\">this</span>._cached || &#123;&#125;;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">if</span> (value !== <span class=\"keyword\">this</span>._cached[propName]) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>._cached[propName] = value;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">let</span> deps = <span class=\"keyword\">this</span>._depsMap[propName];</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> dep of deps) &#123;</div><div class=\"line\">                    <span class=\"keyword\">this</span>._cached[dep] = <span class=\"keyword\">this</span>._getters[dep].call(<span class=\"keyword\">this</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"keyword\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>._cached = <span class=\"keyword\">this</span>._cached || &#123;&#125;;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._cached[propName]; </div><div class=\"line\">        &#125;,</div><div class=\"line\">        enumerable: <span class=\"literal\">true</span>,</div><div class=\"line\">        configurable: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><figcaption><span>computed.ts</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">computed</span>(<span class=\"params\">...deps: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">string</span>&gt;</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, propName, descriptor: TypedPropertyDescriptor&lt;<span class=\"built_in\">any</span>&gt;</span>) </span>&#123;</div><div class=\"line\">        target._depsMap = target._depsMap || &#123;&#125;;</div><div class=\"line\">        target._getters = target._getters || &#123;&#125;;</div><div class=\"line\">        </div><div class=\"line\">        target._getters[propName] = descriptor.get;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> dep of deps) &#123;</div><div class=\"line\">            target._depsMap[dep] = target._depsMap[dep] || [];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (target._depsMap[dep].indexOf(propName) === <span class=\"number\">-1</span>) &#123;    </div><div class=\"line\">                target._depsMap[dep].push(propName);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        descriptor.get = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>._cached = <span class=\"keyword\">this</span>._cached || &#123;&#125;;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._cached[propName];</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> descriptor;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Actually, these decorators are the same stuff as in JavaScript part.</p>\n<p>And here is an updated <code>Person</code> class. Look at a very convenient ‘@-blabla’ notation.\nThis is how decorators are applied in TypeScript.</p>\n<figure class=\"highlight typescript\"><figcaption><span>Person.ts</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Person &#123; </div><div class=\"line\">    @property</div><div class=\"line\">    <span class=\"keyword\">public</span> name: <span class=\"built_in\">string</span>;</div><div class=\"line\">    </div><div class=\"line\">    @property</div><div class=\"line\">    <span class=\"keyword\">public</span> surname: <span class=\"built_in\">string</span>;</div><div class=\"line\">    </div><div class=\"line\">    @computed(<span class=\"string\">'name'</span>, <span class=\"string\">'surname'</span>)</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">get</span> fullname(): <span class=\"built_in\">string</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;this.name&#125;</span> <span class=\"subst\">$&#123;this.surname&#125;</span>`</span>; </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name: string, surname: string) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.surname = surname;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure> \n<h2 id=\"conclusion\">Conclusion</h2>\n<p>In this post I’ve described a method to design data models without any frameworks.</p>\n<p>You can add lots of other features to your models using these approach.\nFor example, you can add <code>observable()</code> decorator paired with <code>.onchange()</code> and <code>.off()</code> methods\nto implement event emitter pattern.</p>\n","excerpt":"","more":"<p>There is a bunch of popular frameworks, which gives you a way to create and manipulate data model.\nFor example, Backbone, Ember, and some others.\nBut modern JavaScript gives you the opportunity to create simple yet powerful models in minutes.</p>\n<p>In first part of this article we will see how to do it. While the second part will show us the power\nof TypeScript in the same task. You will also learn how to create property decorators.</p>\n<p>Let’s start!</p>\n<h2 id=\"part-1-javascript-way\">Part 1. JavaScript Way</h2>\n<p>So, let’s create a model class named <code>Person</code>, which has 2 public properties: <code>name</code> and <code>surname</code>.</p>\n<figure class=\"highlight javascript\"><figcaption><span>Person.js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Person = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, surname</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.surname = surname;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Pretty simple, yeah?</p>\n<p>Let’s add a computed property <code>fullname</code>. We will use <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\">Object.defineProperty()</a>.\nThis is a cool cross-browser feature, which has been implemented even in IE 9.\nIt gives you the opportunity to set accessors without creating <code>.get()</code> and <code>.set()</code> methods.</p>\n<figure class=\"highlight javascript\"><figcaption><span>Person.js continuation</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(Person.prototype, <span class=\"string\">'fullname'</span>, &#123;</div><div class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.surname; </div><div class=\"line\">    &#125;,</div><div class=\"line\">    enumerable: <span class=\"literal\">true</span>,</div><div class=\"line\">    configurable: <span class=\"literal\">false</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> john = <span class=\"keyword\">new</span> Person(<span class=\"string\">'John'</span>, <span class=\"string\">'Snow'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(john.fullname); <span class=\"comment\">// =&gt; 'John Snow'</span></div></pre></td></tr></table></figure>\n<p>Pay your attention to a fact that you should create property in Person.prototype instead of\ninstance, because this property is actually a getter, so it is a function.</p>\n<p>Look how this getter works. It calculates <code>fullname</code> every time you try to get it. Let’s create some caching to avoid redundant computations.\nThis feature requires dependencies (<code>name</code> and <code>surname</code>) to change cached value.\nI suggest to create special <code>property()</code> and <code>computed()</code> functions to bind computeds and dependencies together.</p>\n<figure class=\"highlight javascript\"><figcaption><span>property.js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">property</span>(<span class=\"params\">target, propName</span>) </span>&#123;</div><div class=\"line\">    target.prototype._depsMap = target.prototype._depsMap || &#123;&#125;;</div><div class=\"line\">    target.prototype._getters = target.prototype._getters || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(target.prototype, propName, &#123;</div><div class=\"line\">        set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123; </div><div class=\"line\">            <span class=\"keyword\">this</span>._cached = <span class=\"keyword\">this</span>._cached || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (value !== <span class=\"keyword\">this</span>._cached[propName]) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>._cached[propName] = value;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">var</span> deps = <span class=\"keyword\">this</span>._depsMap[propName];</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; deps.length; i++) &#123;</div><div class=\"line\">                    <span class=\"keyword\">this</span>._cached[deps[i]] = <span class=\"keyword\">this</span>._getters[deps[i]].call(<span class=\"keyword\">this</span>);</div><div class=\"line\">                &#125;      </div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>._cached = <span class=\"keyword\">this</span>._cached || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._cached[propName]; </div><div class=\"line\">        &#125;,</div><div class=\"line\">        enumerable: <span class=\"literal\">true</span>,</div><div class=\"line\">        configurable: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><figcaption><span>computed.js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">computed</span>(<span class=\"params\">target, propName, depsArr, getter</span>) </span>&#123;</div><div class=\"line\">    target.prototype._depsMap = target.prototype._depsMap || &#123;&#125;;</div><div class=\"line\">    target.prototype._getters = target.prototype._getters || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    target.prototype._getters[propName] = getter;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; depsArr.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> dep = depsArr[i];</div><div class=\"line\"></div><div class=\"line\">        target.prototype._depsMap[dep] = target.prototype._depsMap[dep] || [];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (target.prototype._depsMap[dep].indexOf(propName) === <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">            target.prototype._depsMap[dep].push(propName);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; </div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(target.prototype, propName, &#123;</div><div class=\"line\">        get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">            <span class=\"keyword\">this</span>._cached = <span class=\"keyword\">this</span>._cached || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._cached[propName];</div><div class=\"line\">        &#125;,</div><div class=\"line\">        enumerable: <span class=\"literal\">true</span>,</div><div class=\"line\">        configurable: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>In these functions we created service prototype properties:</p>\n<ul>\n<li><code>_depsMap</code> to store information about relations between computeds and dependencies,</li>\n<li><code>_getters</code> to store original getters of computeds.</li>\n</ul>\n<p>One should mention that both of <code>property()</code> and <code>computed()</code> are actually property decorators.</p>\n<p>Now <code>Person</code> model should be described like this:</p>\n<figure class=\"highlight javascript\"><figcaption><span>Person.js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Person = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, surname</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.surname = surname;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">property(Person, <span class=\"string\">'name'</span>);</div><div class=\"line\">property(Person, <span class=\"string\">'surname'</span>);</div><div class=\"line\">computed(Person, <span class=\"string\">'fullname'</span>, [<span class=\"string\">'name'</span>, <span class=\"string\">'surname'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.surname;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Hooray! Now we have simple but awesome model without any frameworks and libraries.</p>\n<h2 id=\"part-2-typescript-way\">Part 2. TypeScript Way</h2>\n<p>OK. Now Let’s do the same thing using cool TypeScript features.</p>\n<p>Simple <code>Person</code> class will look like this:</p>\n<figure class=\"highlight typescript\"><figcaption><span>Person.ts</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Person &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> name: <span class=\"built_in\">string</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> surname: <span class=\"built_in\">string</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">get</span> fullname():<span class=\"built_in\">string</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;this.name&#125;</span> <span class=\"subst\">$&#123;this.surname&#125;</span>`</span>; </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name: string, surname: string) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.surname = surname;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>I have mentioned that <code>property()</code> and <code>computed()</code> from part 1 are decorators.\nTypescript has very convenient style of creating and using decorators.\nYou can get more info in <a href=\"http://blog.wolksoftware.com/decorators-reflection-javascript-typescript\">this article</a>.</p>\n<p>I should say that decorators are still an experimental TS feature.\nThe compiler must be run with <code>--experimentalDecorators</code> flag.</p>\n<p>So these are new functions:</p>\n<figure class=\"highlight typescript\"><figcaption><span>property.ts</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">property</span>(<span class=\"params\">target: <span class=\"built_in\">any</span>, propName: <span class=\"built_in\">string</span></span>) </span>&#123;</div><div class=\"line\">    target._depsMap = target._depsMap || &#123;&#125;;</div><div class=\"line\">    target._getters = target._getters || &#123;&#125;;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(target, propName, &#123;</div><div class=\"line\">        <span class=\"keyword\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123; </div><div class=\"line\">            <span class=\"keyword\">this</span>._cached = <span class=\"keyword\">this</span>._cached || &#123;&#125;;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">if</span> (value !== <span class=\"keyword\">this</span>._cached[propName]) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>._cached[propName] = value;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">let</span> deps = <span class=\"keyword\">this</span>._depsMap[propName];</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> dep of deps) &#123;</div><div class=\"line\">                    <span class=\"keyword\">this</span>._cached[dep] = <span class=\"keyword\">this</span>._getters[dep].call(<span class=\"keyword\">this</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"keyword\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>._cached = <span class=\"keyword\">this</span>._cached || &#123;&#125;;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._cached[propName]; </div><div class=\"line\">        &#125;,</div><div class=\"line\">        enumerable: <span class=\"literal\">true</span>,</div><div class=\"line\">        configurable: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><figcaption><span>computed.ts</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">computed</span>(<span class=\"params\">...deps: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">string</span>&gt;</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, propName, descriptor: TypedPropertyDescriptor&lt;<span class=\"built_in\">any</span>&gt;</span>) </span>&#123;</div><div class=\"line\">        target._depsMap = target._depsMap || &#123;&#125;;</div><div class=\"line\">        target._getters = target._getters || &#123;&#125;;</div><div class=\"line\">        </div><div class=\"line\">        target._getters[propName] = descriptor.get;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> dep of deps) &#123;</div><div class=\"line\">            target._depsMap[dep] = target._depsMap[dep] || [];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (target._depsMap[dep].indexOf(propName) === <span class=\"number\">-1</span>) &#123;    </div><div class=\"line\">                target._depsMap[dep].push(propName);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        descriptor.get = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>._cached = <span class=\"keyword\">this</span>._cached || &#123;&#125;;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._cached[propName];</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> descriptor;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Actually, these decorators are the same stuff as in JavaScript part.</p>\n<p>And here is an updated <code>Person</code> class. Look at a very convenient ‘@-blabla’ notation.\nThis is how decorators are applied in TypeScript.</p>\n<figure class=\"highlight typescript\"><figcaption><span>Person.ts</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Person &#123; </div><div class=\"line\">    @property</div><div class=\"line\">    <span class=\"keyword\">public</span> name: <span class=\"built_in\">string</span>;</div><div class=\"line\">    </div><div class=\"line\">    @property</div><div class=\"line\">    <span class=\"keyword\">public</span> surname: <span class=\"built_in\">string</span>;</div><div class=\"line\">    </div><div class=\"line\">    @computed(<span class=\"string\">'name'</span>, <span class=\"string\">'surname'</span>)</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">get</span> fullname(): <span class=\"built_in\">string</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;this.name&#125;</span> <span class=\"subst\">$&#123;this.surname&#125;</span>`</span>; </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name: string, surname: string) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.surname = surname;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure> \n<h2 id=\"conclusion\">Conclusion</h2>\n<p>In this post I’ve described a method to design data models without any frameworks.</p>\n<p>You can add lots of other features to your models using these approach.\nFor example, you can add <code>observable()</code> decorator paired with <code>.onchange()</code> and <code>.off()</code> methods\nto implement event emitter pattern.</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cirxg185y00012721d3z501dz","category_id":"cirxg186600032721wggmks3b","_id":"cirxg186800052721clb9l21u"}],"PostTag":[{"post_id":"cirxg185y00012721d3z501dz","tag_id":"cirxg186400022721cwds9ud3","_id":"cirxg186800062721473a1osm"},{"post_id":"cirxg185y00012721d3z501dz","tag_id":"cirxg186700042721lyhmdaof","_id":"cirxg186800072721ql6c6bzq"}],"Tag":[{"name":"JavaScript","_id":"cirxg186400022721cwds9ud3"},{"name":"TypeScript","_id":"cirxg186700042721lyhmdaof"}]}}